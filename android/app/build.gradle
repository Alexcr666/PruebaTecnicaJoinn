def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '5'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.4'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
   compileOptions {
      sourceCompatibility = 11
      targetCompatibility = 11
    }
  
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        multiDexEnabled true
        applicationId "com.flutter.dj_mania"
        minSdkVersion 20
        
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
       // ndk {
         //   abiFilters "armeabi-v7a", "x86_64", "armeabi", "mips" // abiFilters "arm64-v8a", "armeabi-v7a","armeabi", "mips", "x86"
        //}
        splits {
    abi {
        enable true
        reset()
        include 'x86', 'armeabi-v7a','arm64'
        universalApk true
    }
}
        
    }

    signingConfigs {
        release {
          //  keyAlias keystoreProperties['keyAlias']
        //    keyPassword keystoreProperties['keyPassword']
          //  storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            //storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            //multiDexKeepFile file('multidex-config.txt')
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:29.0.3')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation 'com.google.firebase:firebase-perf:19.0.7'
    implementation 'androidx.appcompat:appcompat:1.3.0'

}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'